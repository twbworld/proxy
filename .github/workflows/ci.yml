name: ci
on:
  workflow_dispatch: #github页面手动触发
  push: #push即触发
    branches:
      - main
    paths-ignore: #不作为触发的文件
      - '.*'
      - 'LICENSE'
      - 'README.md'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '.*'
      - 'LICENSE'
      - 'README.md'
  # workflow_run: #workflow执行顺序,当前文件最后执行;必须为默认分支,否则不会触发,好奇怪
  #   workflows:
  #     - ci
  #   branches:
  #     - main
  #   types:
  #     - completed #requested || completed ;上一个"完成才执行下一个"
jobs:
  ci:
    runs-on: ubuntu-20.04 #虚拟环境(github提供)
    env:
      TZ: Asia/Shanghai
    steps:
      - uses: actions/checkout@v2
      - uses: php-actions/composer@v5
      - name: restart-mysql #该ubuntu-20.04自带mysql8.0
        run: sudo systemctl restart mysql
      - name: create-db
        run: sudo mysqladmin -uroot -proot create trojan
      - name: save-data
        run: sudo mysql -uroot -proot trojan < src/data/users.sql
      - name: add-envFile
        env:
          ENVDATA: '{"superUrl":["vmess://aa=="],"trojan":[{"domain":"www.domain.com","port":"80"}],"mysqlConfig":{"dbname":"trojan","host":"localhost","username":"root","password":"root"}}'
        run: sudo echo $ENVDATA > src/config/.env
      - name: use-php7.4
        run: | #使用7.4(该ubuntu-20.04自带7.4/php8.0(默认)); 卸载php8的xdebug, 并安装php7的xdebug
          sudo ln -sf /bin/php7.4 /bin/php
          sudo ln -sf /usr/bin/php7.4 /usr/bin/php
          sudo apt-get update
          sudo apt-get remove -y php-xdebug
          sudo apt-get install -y php-xdebug
          sudo systemctl restart php7.4-fpm
      - name: phpunit-test
        run: sudo XDEBUG_MODE=coverage ./vendor/bin/phpunit #如不设XDEBUG_MODE=coverage,则不生成coverage.xml

      # - uses: php-actions/phpunit@v2
      #   with:
      #     configuration: ./phpunit.xml
      #     version: 9.5.2
      #     php_version: 7.4
      #     php_extensions: xdebug mbstring mysqli pdo_mysql

      - name: Upload-codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ./tests/report/coverage.xml

      # - name: Up-Codecov
      #   uses: codecov/codecov-action@v1
      #   with:
      #     token: ${{secrets.CODECOV_TOKEN}}
      #     file: ./tests/report/coverage.xml
      #     directory: ./tests/report/
      #     fail_ci_if_error: true #出错暂停
      #     verbose: true #列出详情

      # 运行Codacy需要干净的环境
      - name: Clean-file
        run: git clean -df
      # 运行Codacy,可使用.codacy.yml配置
      - name: Codacy
        uses: codacy/codacy-analysis-cli-action@master
        with:
          # tool: PHP_CodeSniffer,PHP Mess Detector,PHPCPD,PHP Depend,phpmd,phpcs #参考: https://docs.codacy.com/getting-started/supported-languages-and-tools/
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          upload: true #上传"代码质量"报告到Codacy(因为本地审查代码,要关闭远程Codacy的审查功能(Repository analysis开启))
          format: sarif
          output: ../results.sarif #要求干净的环境,把文件放在项目外,否则会报错
          gh-code-scanning-compat: true #兼容Github的报错等级
          verbose: true #列出详情
          max-allowed-issues: 2147483647 #允许最大的"问题数"
      # 对接Github的Security菜单
      - name: Upload-github-sarif-reporter
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ../results.sarif

  cd:
    needs: ci
    runs-on: ubuntu-20.04
    env:
      TZ: Asia/Shanghai
    steps:
      - name: pull-repo
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /var/www/html/proxy/
            git checkout -- .
            git clean -df
            git checkout main
            git fetch origin main
            git reset --hard origin/main
      - name: handle-users #按逻辑:这一步骤应该以src/data/users.json来触发的,但是workflow_run不能使用paths
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            docker exec php /bin/bash -c 'cd proxy/src/scripts/ && chmod +x * && php bash.php handle && exit'
            docker exec trojan /bin/bash -c 'systemctl restart trojan && exit'
            exit
